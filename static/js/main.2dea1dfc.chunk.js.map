{"version":3,"sources":["background.jpg","images/00056-000032-0.5.jpg","images/00056-000032-1.jpg","images/00056-000032-2.jpg","images/00056-000032-3.jpg","Shared.tsx","BlockchainInteraction.tsx","API.tsx","BondingCurveChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IMAGES_CDN","GRAPHQL_URL","GEMS_CONTRACT","PSI_CONTRACT","PSI_STATS_URL","fontStyles","fontSize","fontWeight","color","backgroundColor","Modal","modalData","blockchain","setModalData","style","position","top","bottom","left","right","background","display","justifyContent","alignItems","margin","overflow","padding","type","MyGemModal","TheirGemModal","zIndex","onClick","undefined","width","LargeGem","gem","textAlign","marginTop","marginBottom","marginLeft","fontFamily","value","id","activated","marginRight","Button","gems","reforge","burn","activate","TextInput","setInput","input","paddingLeft","paddingRight","onChange","e","target","children","active","cursor","imageLink","useState","showImage","setShowImage","height","alt","src","onError","setTimeout","CheapGemSpinner","size","number","psi","viewBox","d","fill","attributeName","from","to","dur","repeatCount","GemThumbnail","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","fe","ethers","utils","formatEther","pe","parseEther","BlockchainInteraction","connectProvider","userData","paddingTop","paddingBottom","BuyPSIBox","ForgeAGemBox","YourGems","mode","setMode","buy","sell","formStates","setFormStates","psiInputAmounts","setPsiInputAmounts","ethEstimates","setEthEstimates","debounceIDs","setDebounceIDs","setForm","psiInputBigNum","debounceID","clearTimeout","timeoutID","a","quoteBuy","quoteSell","estimate","formInterval","psiForm","setPsiForm","psiInputAmount","setPsiInputAmount","lt","psiBalance","console","log","forge","lte","flexWrap","map","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","network","cacheProvider","recentGemsQuery","userGemsQuery","getRecentGems","fetch","method","headers","Accept","body","JSON","stringify","query","json","graphGems","data","getUserData","userAddress","variables","balanceOf","getCurrentPsiData","req","providers","Web3Provider","connect","provider","Contract","gemArtifact","abi","getSigner","psiArtifact","require","calculateLabelAlignment","pointerData","supplyCap","alignment","totalSupply","Chart","register","registerables","ChartDataLabels","MyChart","chartContainer","setChartInstance","newChartInstance","datasets","pointRadius","x","y","eth","price","datalabels","align","offset","borderRadius","clamp","font","weight","formatter","context","formattedSupply","numeral","format","formattedPriceDollars","dollars","formattedMarketCapDollars","marketCap","formattedPriceEth","formattedMarketCapEth","showLine","record","responsive","aspectRatio","elements","line","borderColor","point","radius","plugins","legend","scales","grid","tickColor","ticks","title","text","ethPrice","formattedEthPrice","Number","formattedDollarPrice","etherPrice","destroy","ref","DigDeeper","flexDirection","PageTitle","maxWidth","className","opacity","RecentGems","gemData","alignContent","i","ExplainerText","currentPsiData","PSIDiagram","href","psi50example","psi100example","psi200example","psi300example","FAQ","App","setBlockchain","setUserAddress","recentGems","setRecentGems","setUserData","setCurrentPsiData","retrieveRecentGems","retrieveCurrentPsiData","getAddress","backgroundImage","backgroundPositionX","backgroundRepeat","overflowY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dea1dfc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.2d8f010b.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-0.5.963feb29.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-1.c709deab.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-2.3a5d78de.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-3.7b8499fc.jpg\";","import React, {\n  CSSProperties,\n  ReactNode,\n  useEffect,\n  useState,\n  useRef,\n} from \"react\";\nimport \"./App.css\";\nimport { GemData, ModalData, Blockchain } from \"./Types\";\n\nexport const IMAGES_CDN = \"https://cdn.deepge.ms/\";\nexport const METADATA_CDN = \"https://cdn.deepge.ms/metadata/\";\nexport const GRAPHQL_URL =\n  \"https://api.thegraph.com/subgraphs/name/jtremback/deepgems\";\nexport const GEMS_CONTRACT = \"0x6A746B25b240518cf26bdA877A969De85Db492b7\";\nexport const PSI_CONTRACT = \"0x70d626dFE4BACaD28994469b6baC702979bdeB09\";\nexport const PSI_STATS_URL =\n  \"https://s3-us-west-2.amazonaws.com/cdn.deepge.ms/psiStats.json\";\n\nexport const fontStyles: CSSProperties = {\n  fontSize: 24,\n  fontWeight: \"lighter\",\n  color: \"white\",\n  backgroundColor: \"rgba(0,0,0,0.7)\",\n};\n\nexport function Modal({\n  modalData,\n  blockchain,\n  setModalData,\n}: {\n  modalData: ModalData;\n  blockchain: Blockchain;\n  setModalData: (x?: ModalData) => void;\n}) {\n  return (\n    modalData && (\n      <div\n        style={{\n          position: \"fixed\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          background: \"rgba(0,0,0,0.5)\",\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            ...fontStyles,\n            margin: 40,\n            overflow: \"auto\",\n            padding: 20,\n          }}\n        >\n          {\" \"}\n          {(() => {\n            switch (modalData.type) {\n              case \"MyGemModal\":\n                return (\n                  <MyGemModal blockchain={blockchain!} modalData={modalData} />\n                );\n              case \"TheirGemModal\":\n                return (\n                  <TheirGemModal\n                    blockchain={blockchain!}\n                    modalData={modalData}\n                  />\n                );\n            }\n          })()}\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            zIndex: -1,\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n          }}\n          onClick={() => setModalData(undefined)}\n        ></div>\n      </div>\n    )\n  );\n}\n\nexport function MyGemModal({\n  modalData,\n  blockchain,\n}: {\n  modalData: ModalData;\n  blockchain: Blockchain;\n}) {\n  return (\n    <div\n      style={{\n        width: 384,\n      }}\n    >\n      <div\n        style={{\n          width: 384,\n          // height: 280,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <LargeGem gem={modalData.gem} />\n      </div>\n      <div\n        style={{\n          color: \"white\",\n          textAlign: \"center\",\n          fontSize: 16,\n          marginTop: 20,\n          marginBottom: 20,\n          display: \"flex\",\n        }}\n      >\n        <div>tokenId:</div>\n        <input\n          style={{\n            backgroundColor: \"grey\",\n            marginLeft: 5,\n            fontSize: 14,\n            width: \"22em\",\n            display: \"block\",\n            fontFamily: \"Inconsolata\",\n          }}\n          type=\"text\"\n          value={modalData.gem.id}\n        />\n      </div>\n      <div\n        style={{\n          display: modalData.gem.activated ? \"none\" : \"flex\",\n          marginBottom: 10,\n        }}\n      >\n        <div style={{ marginRight: 10 }}>\n          <Button\n            onClick={() => {\n              blockchain!.gems.reforge(modalData.gem.id);\n            }}\n          >\n            Reforge\n          </Button>\n        </div>\n        <div style={{ fontSize: 16 }}>\n          Reforging a gem creates a new gem using this gem's PSI.\n        </div>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          marginBottom: 10,\n        }}\n      >\n        <div style={{ marginRight: 10 }}>\n          <Button\n            onClick={() => {\n              blockchain!.gems.burn(modalData.gem.id);\n            }}\n          >\n            Burn\n          </Button>\n        </div>\n        <div style={{ fontSize: 16 }}>\n          Burning a gem destroys the gem and adds the PSI to your account.\n        </div>\n      </div>\n\n      <div\n        style={{\n          marginBottom: 10,\n          display: modalData.gem.activated ? \"none\" : \"flex\",\n        }}\n      >\n        <div style={{ marginRight: 10 }}>\n          <Button\n            onClick={() => {\n              blockchain!.gems.activate(modalData.gem.id);\n            }}\n          >\n            Activate\n          </Button>\n        </div>\n        <div style={{ fontSize: 16 }}>\n          Activating a gem turns it into a full NFT and allows you to transfer\n          it and trade it on NFT exchanges.\n        </div>\n      </div>\n      <div\n        style={{\n          fontSize: 16,\n          display: modalData.gem.activated ? \"flex\" : \"none\",\n        }}\n      >\n        This gem has been activated and can be transferred to other accounts and\n        traded on NFT exchanges.\n      </div>\n    </div>\n  );\n}\n\nexport function TheirGemModal({\n  modalData,\n  blockchain,\n}: {\n  modalData: ModalData;\n  blockchain: Blockchain;\n}) {\n  return (\n    <div\n      style={{\n        width: 384,\n      }}\n    >\n      <div\n        style={{\n          width: 384,\n          // height: 280,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <LargeGem gem={modalData.gem} />\n      </div>\n      <div\n        style={{\n          color: \"white\",\n          textAlign: \"center\",\n          fontSize: 16,\n          marginTop: 20,\n          marginBottom: 20,\n          display: \"flex\",\n        }}\n      >\n        <div>tokenId:</div>\n        <input\n          style={{\n            backgroundColor: \"grey\",\n            marginLeft: 5,\n            fontSize: 14,\n            width: \"22em\",\n            display: \"block\",\n            fontFamily: \"Inconsolata\",\n          }}\n          type=\"text\"\n          value={modalData.gem.id}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function TextInput({\n  style,\n  setInput,\n  input,\n}: {\n  style?: React.CSSProperties;\n  setInput: (x: string) => void;\n  input: string;\n}) {\n  return (\n    <input\n      style={{\n        backgroundColor: \"grey\",\n        paddingLeft: 10,\n        paddingRight: 10,\n        display: \"block\",\n        fontFamily: \"Inconsolata\",\n        ...style,\n      }}\n      type=\"text\"\n      value={input}\n      onChange={(e) => setInput(e.target.value)}\n    />\n  );\n}\n\nexport function Button({\n  children,\n  onClick,\n  active,\n}: {\n  children: ReactNode;\n  onClick?: React.MouseEventHandler;\n  active?: boolean;\n}) {\n  if (active === undefined) {\n    active = true;\n  }\n  return (\n    <button\n      onClick={active ? onClick : undefined}\n      type=\"button\"\n      style={{\n        fontFamily: \"Bebas Neue\",\n        background: active ? \"blue\" : \"gray\",\n        display: \"block\",\n        padding: \"10px 20px\",\n        cursor: active ? \"pointer\" : \"auto\",\n      }}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function LargeGem({\n  style,\n  gem,\n}: {\n  style?: React.CSSProperties;\n  gem: GemData;\n}) {\n  const imageLink = `${IMAGES_CDN}${gem.id}.jpg`;\n  const [showImage, setShowImage] = useState(true);\n\n  // const forgeTime = formatDistanceToNowStrict(new Date(gem.forgeTime * 1000), {\n  //   addSuffix: true,\n  // });\n\n  function onImageError() {\n    setShowImage(false);\n    setTimeout(() => {\n      setShowImage(true);\n    }, 1000);\n  }\n  return (\n    <div\n      style={{\n        // display: \"inline-block\",\n        background: \"rgba(0,0,0,0.7)\",\n        margin: 5,\n        ...style,\n      }}\n    >\n      {showImage ? (\n        <img\n          style={{\n            width: 200,\n            height: 200,\n          }}\n          alt=\"\"\n          src={imageLink}\n          onError={onImageError}\n        />\n      ) : (\n        <CheapGemSpinner size={200} />\n      )}\n      <div style={{ color: \"white\", textAlign: \"center\", fontSize: 16 }}>\n        {`#${gem.number} - ${gem.psi} PSI`}\n      </div>\n    </div>\n  );\n}\n\nexport function CheapGemSpinner({ size }: { size: number }) {\n  return (\n    <svg width={`${size}px`} height={`${size}px`} viewBox=\"0 0 128 128\">\n      <g>\n        <path\n          d=\"M64 128A64 64 0 0 1 18.34 19.16L21.16 22a60 60 0 1 0 52.8-17.17l.62-3.95A64 64 0 0 1 64 128z\"\n          fill=\"#ffffff\"\n        />\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          from=\"0 64 64\"\n          to=\"360 64 64\"\n          dur=\"2400ms\"\n          repeatCount=\"indefinite\"\n        ></animateTransform>\n      </g>\n    </svg>\n  );\n}\n\nexport function GemThumbnail({\n  style,\n  gem,\n  setModalData,\n}: {\n  style?: React.CSSProperties;\n  gem: GemData;\n  setModalData: (x: ModalData) => void;\n}) {\n  const [showImage, setShowImage] = useState(true);\n\n  function onImageError() {\n    setShowImage(false);\n    setTimeout(() => {\n      setShowImage(true);\n    }, 1000);\n  }\n\n  return (\n    <div\n      style={{\n        width: 100,\n        height: 100,\n        overflow: \"hidden\",\n        cursor: \"pointer\",\n        ...style,\n      }}\n    >\n      <div\n        style={{\n          overflow: \"hidden\",\n        }}\n        onClick={() =>\n          setModalData({\n            type: \"MyGemModal\",\n            gem,\n          })\n        }\n      >\n        {showImage ? (\n          <img\n            style={{\n              width: 100,\n              height: 100,\n            }}\n            alt=\"\"\n            src={`${IMAGES_CDN}${gem.id}.jpg`}\n            onError={onImageError}\n          />\n        ) : (\n          <CheapGemSpinner size={100} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function GemSpinner() {\n  return (\n    <svg\n      width=\"100px\"\n      height=\"100px\"\n      viewBox=\"0 0 100 100\"\n      preserveAspectRatio=\"xMidYMid\"\n    >\n      <defs>\n        <filter id=\"f1\" x=\"0\" y=\"0\">\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n        </filter>\n      </defs>\n      <g transform=\"translate(50 50)\" filter=\"url(#f1)\">\n        <g transform=\"scale(0.7)\">\n          <g transform=\"translate(-50 -50)\">\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"0.7575757575757576s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#ea3f34\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"1.0101010101010102s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#f2982c\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(90 50 50)\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"1.5151515151515151s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#52a360\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(180 50 50)\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"3.0303030303030303s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#674794\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(270 50 50)\"\n              ></path>\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  );\n}\n\nexport function useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [callback, delay]);\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  Button,\n  TextInput,\n  IMAGES_CDN,\n  GemThumbnail,\n  LargeGem,\n  useInterval,\n  fontStyles,\n} from \"./Shared\";\nimport { GemData, UserData, Blockchain, ModalData } from \"./Types\";\n\nconst fe = ethers.utils.formatEther;\nconst pe = ethers.utils.parseEther;\n\nexport function BlockchainInteraction({\n  connectProvider,\n  blockchain,\n  userData,\n  setModalData,\n}: {\n  connectProvider: () => void;\n  blockchain?: Blockchain;\n  userData?: UserData;\n  setModalData: (x: ModalData) => void;\n}) {\n  return (\n    <div style={{ position: \"relative\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          paddingTop: 40,\n          paddingBottom: 40,\n        }}\n      >\n        <>\n          <BuyPSIBox blockchain={blockchain} setModalData={setModalData} />\n          <ForgeAGemBox blockchain={blockchain} userData={userData} />\n        </>\n      </div>\n      {blockchain && (\n        <YourGems\n          blockchain={blockchain!}\n          userData={userData!}\n          setModalData={setModalData}\n        />\n      )}\n      {!blockchain && (\n        <div\n          style={{\n            position: \"absolute\",\n            background: \"rgba(0,0,0,0.8)\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button onClick={connectProvider}>Connect Wallet</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction BuyPSIBox({\n  blockchain,\n  setModalData,\n}: {\n  blockchain?: Blockchain;\n  setModalData: (x: ModalData) => void;\n}) {\n  const [mode, setMode] = useState<\"buy\" | \"sell\">(\"buy\");\n  const [formStates, setFormStates] = useState<{\n    buy: string;\n    sell: string;\n  }>({\n    buy: \"\",\n    sell: \"\",\n  });\n  const [psiInputAmounts, setPsiInputAmounts] = useState<{\n    buy?: BigNumber;\n    sell?: BigNumber;\n  }>({});\n  const [ethEstimates, setEthEstimates] = useState<{\n    buy?: BigNumber;\n    sell?: BigNumber;\n  }>({});\n  const [debounceIDs, setDebounceIDs] = useState<{\n    buy?: NodeJS.Timeout;\n    sell?: NodeJS.Timeout;\n  }>({});\n\n  function setForm(type: \"buy\" | \"sell\", input: string) {\n    // Set form state\n    setFormStates({\n      ...formStates,\n      [type]: input,\n    });\n\n    const debounceID = debounceIDs[type];\n\n    // Cancel previous request\n    if (debounceID) {\n      clearTimeout(debounceID);\n    }\n\n    let psiInputBigNum: BigNumber;\n    // Try to parse input as bigNum.\n    try {\n      psiInputBigNum = pe(input);\n    } catch (e) {\n      // If it does not succeed, set the estimates and\n      // the input amounts to undefined and exit\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: undefined,\n      });\n      setPsiInputAmounts({\n        ...psiInputAmounts,\n        [type]: undefined,\n      });\n      return;\n    }\n\n    // if it does succeed set the input amounts and prepare to make\n    // delayed query\n    setPsiInputAmounts({\n      ...psiInputAmounts,\n      [type]: psiInputBigNum,\n    });\n\n    // Set to undefined to get loading spinner\n    setEthEstimates({ ...ethEstimates, [type]: undefined });\n\n    // Set timeout to make request and set estimate\n    const timeoutID = setTimeout(async () => {\n      const estimate =\n        type === \"buy\"\n          ? await blockchain!.psi.quoteBuy(psiInputBigNum)\n          : await blockchain!.psi.quoteSell(psiInputBigNum);\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: estimate,\n      });\n    }, 1000);\n\n    setDebounceIDs({ ...debounceIDs, [type]: timeoutID });\n  }\n\n  async function formInterval(type: \"buy\" | \"sell\") {\n    // If there is a correctly parsed psi input, get the estimate and\n    // set it here. If the input did not parse correctly, this will be skipped\n    if (psiInputAmounts[type]) {\n      const estimate =\n        type === \"buy\"\n          ? await blockchain!.psi.quoteBuy(psiInputAmounts[type]!)\n          : await blockchain!.psi.quoteSell(psiInputAmounts[type]!);\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: estimate,\n      });\n    }\n  }\n\n  useInterval(() => {\n    if (mode === \"buy\") {\n      formInterval(\"buy\");\n    } else {\n      formInterval(\"sell\");\n    }\n  }, 5000);\n\n  return (\n    <div style={{ background: \"rgb(27,23,20)\", padding: 40 }}>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <h2\n          onClick={() => setMode(\"buy\")}\n          style={\n            mode === \"buy\"\n              ? { marginTop: 10 }\n              : { color: \"grey\", cursor: \"pointer\", marginTop: 10 }\n          }\n        >\n          Buy PSI\n        </h2>\n        <h2\n          onClick={() => setMode(\"sell\")}\n          style={\n            mode === \"sell\"\n              ? { marginTop: 10 }\n              : { color: \"grey\", cursor: \"pointer\", marginTop: 10 }\n          }\n        >\n          Sell PSI\n        </h2>\n      </div>\n      {mode === \"buy\" ? (\n        <form>\n          <p>Amount of PSI to buy:</p>\n          <p>\n            <TextInput\n              input={formStates.buy}\n              setInput={(input) => setForm(\"buy\", input)}\n            />\n          </p>\n          <p>Estimated ETH required:</p>\n          <p style={{ fontFamily: \"Inconsolata\" }}>\n            {ethEstimates.buy ? `${fe(ethEstimates.buy)} ETH` : \"...\"}\n          </p>\n          <Button\n            active={!!psiInputAmounts.buy && !!ethEstimates.buy}\n            onClick={() => {\n              blockchain!.psi.buy(psiInputAmounts.buy!, {\n                value: ethEstimates.buy!,\n              });\n            }}\n          >\n            Buy\n          </Button>\n        </form>\n      ) : (\n        <form>\n          <p>Amount of PSI to sell:</p>\n          <p>\n            <TextInput\n              input={formStates.sell}\n              setInput={(input) => setForm(\"sell\", input)}\n            />\n          </p>\n          <p>Estimated ETH earned:</p>\n          <p style={{ fontFamily: \"Inconsolata\" }}>\n            {ethEstimates.sell ? `${fe(ethEstimates.sell)} ETH` : \"...\"}\n          </p>\n          <Button\n            active={!!psiInputAmounts.sell && !!ethEstimates.sell}\n            onClick={() => {\n              blockchain!.psi.sell(psiInputAmounts.sell!, ethEstimates.sell!);\n            }}\n          >\n            Sell\n          </Button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nfunction ForgeAGemBox({\n  userData,\n  blockchain,\n}: {\n  userData?: UserData;\n  blockchain?: Blockchain;\n}) {\n  const [psiForm, setPsiForm] = useState(\"\");\n  const [psiInputAmount, setPsiInputAmount] = useState<BigNumber>();\n\n  function setForm(input: string) {\n    // Set form state\n    setPsiForm(input);\n    let psiInputBigNum: BigNumber;\n    // Try to parse input as bigNum.\n    try {\n      psiInputBigNum = pe(input);\n    } catch (e) {\n      // Set to undefined if it doesn't work\n      setPsiInputAmount(undefined);\n      return;\n    }\n    // Check if PSI is enough to forge a gem\n    if (psiInputBigNum.lt(pe(\"0.1\"))) {\n      setPsiInputAmount(undefined);\n      return;\n    }\n    setPsiInputAmount(psiInputBigNum);\n  }\n\n  return (\n    <div style={{ background: \"rgb(27,23,20)\", padding: 40 }}>\n      <h2 style={{ marginTop: 10 }}>Forge a Gem</h2>\n      <form>\n        <p style={{ marginBottom: 0 }}>Amount of PSI to forge the gem with:</p>\n        <p style={{ marginTop: 0, fontSize: 16 }}>(must be 0.1 or greater)</p>\n        <p>\n          <TextInput input={psiForm} setInput={setForm} />\n        </p>\n        <p>Your PSI balance:</p>\n        <p style={{ fontFamily: \"Inconsolata\" }}>\n          {userData && fe(userData.psiBalance)} PSI\n        </p>\n        <Button\n          onClick={() => {\n            console.log(\"forging\");\n            psiInputAmount && blockchain!.gems.forge(psiInputAmount);\n          }}\n          active={!!psiInputAmount && psiInputAmount.lte(userData!.psiBalance)}\n        >\n          Forge\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nfunction YourGems({\n  userData,\n  blockchain,\n  setModalData,\n}: {\n  userData: UserData;\n  blockchain: Blockchain;\n  setModalData: (x: ModalData) => void;\n}) {\n  return (\n    <>\n      <h2>Your gems:</h2>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {userData &&\n          userData.gems.map((gem) => {\n            return (\n              <GemThumbnail\n                style={{ margin: 5 }}\n                gem={gem}\n                setModalData={setModalData}\n              />\n            );\n          })}\n      </div>\n    </>\n  );\n}\n","import \"./App.css\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport { DeepGems } from \"../../solidity/typechain/DeepGems\";\nimport { PSI } from \"../../solidity/typechain/PSI\";\nimport { Blockchain } from \"./Types\";\n\nimport gemArtifact from \"./artifacts/contracts/DeepGems.sol/DeepGems.json\";\nimport psiArtifact from \"./artifacts/contracts/PSI.sol/PSI.json\";\nimport {\n  GRAPHQL_URL,\n  GEMS_CONTRACT,\n  PSI_CONTRACT,\n  PSI_STATS_URL,\n} from \"./Shared\";\n\n// TODO\n// - Get buttons on gem modal to work\n// - use more rigorous margin of error etc on buys and sells\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: \"INFURA_ID\", // required\n    },\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nconst recentGemsQuery = `{\n  gems(orderBy: number, orderDirection: desc, first: 24, where: { burned: false }){\n    id\n    psi\n    owner\n    forgeTime\n    forgeBlock\n    number\n    activated\n  }\n}`;\n\nconst userGemsQuery = `query UserGems($userAddress: Bytes!) {\n  gems(orderBy:number, orderDirection: asc, where: { owner: $userAddress, burned: false }){\n    id\n    psi\n    owner\n    forgeTime\n    forgeBlock\n    number\n    activated\n  }\n}`;\n\nexport async function getRecentGems() {\n  const graphGems = (\n    await (\n      await fetch(GRAPHQL_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({ query: recentGemsQuery }),\n      })\n    ).json()\n  ).data.gems;\n  return graphGems;\n}\n\nexport async function getUserData(blockchain: Blockchain, userAddress: string) {\n  const gems = (\n    await (\n      await fetch(GRAPHQL_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({\n          query: userGemsQuery,\n          variables: {\n            userAddress,\n          },\n        }),\n      })\n    ).json()\n  ).data.gems;\n\n  const psiBalance = await blockchain.psi.balanceOf(userAddress);\n\n  return { gems, psiBalance };\n}\n\nexport async function getCurrentPsiData() {\n  const req = await fetch(PSI_STATS_URL, {\n    method: \"GET\",\n  });\n\n  return await req.json();\n}\n\nexport async function connectProvider() {\n  //  Enable session (triggers QR Code modal)\n  const provider = new ethers.providers.Web3Provider(await web3Modal.connect());\n  const gems = (new ethers.Contract(\n    GEMS_CONTRACT,\n    gemArtifact.abi,\n    provider.getSigner()\n  ) as any) as DeepGems;\n\n  const psi = (new ethers.Contract(\n    PSI_CONTRACT,\n    psiArtifact.abi,\n    provider.getSigner()\n  ) as any) as PSI;\n  return { provider, gems, psi };\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport numeral from \"numeral\";\nimport { CurrentPsiData, CurveDataPoint } from \"./Types\";\nimport { isConstructorDeclaration } from \"typescript\";\n\nconst data = require(\"./bondingCurveData.json\");\nChart.register(...registerables, ChartDataLabels);\n\nfunction parseData(data: CurveDataPoint[]): { x: number; y: number }[] {\n  return data.map((record) => ({\n    x: record.totalSupply,\n    y: record.price,\n  }));\n}\n\nfunction calculateLabelAlignment(\n  pointerData: CurrentPsiData,\n  supplyCap: number\n) {\n  let alignment = -52;\n  if (pointerData.totalSupply > supplyCap * 0.1) {\n    alignment = -90;\n  }\n  if (pointerData.totalSupply > supplyCap * 0.6) {\n    alignment = 180;\n  }\n  if (pointerData.totalSupply > supplyCap * 0.8) {\n    alignment = -225;\n  }\n\n  return alignment;\n}\n\nconst MyChart = ({ pointerData }: { pointerData: CurrentPsiData }) => {\n  const chartContainer = useRef<HTMLCanvasElement>(null);\n  const [chartInstance, setChartInstance] = useState<Chart | undefined>(\n    undefined\n  );\n  console.log(\"pointerData\", pointerData);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chart(chartContainer.current, {\n        type: \"scatter\",\n        data: {\n          datasets: [\n            {\n              type: \"line\",\n              pointRadius: 8,\n              backgroundColor: \"white\",\n              data: [\n                {\n                  x: pointerData.totalSupply,\n                  y: pointerData.eth.price,\n                },\n              ],\n              datalabels: {\n                backgroundColor: \"rgba(255,255,255,1)\",\n                align: calculateLabelAlignment(pointerData, 2500000),\n                offset: 20,\n                borderRadius: 4,\n                clamp: true,\n                color: \"black\",\n                font: {\n                  weight: \"bold\",\n                },\n                padding: 10,\n                formatter: function (value, context) {\n                  const formattedSupply = numeral(\n                    pointerData.totalSupply\n                  ).format(\"0[.]0a\");\n\n                  const formattedPriceDollars = numeral(\n                    pointerData.dollars.price\n                  ).format(\"$0[.]00a\");\n                  const formattedMarketCapDollars = numeral(\n                    pointerData.dollars.marketCap\n                  ).format(\"$0[.]0a\");\n\n                  const formattedPriceEth = numeral(\n                    pointerData.eth.price\n                  ).format(\"0[.]00000a\");\n                  const formattedMarketCapEth = numeral(\n                    pointerData.eth.marketCap\n                  ).format(\"0[.]000a\");\n\n                  return `Current PSI stats:\\nPSI bought: ${formattedSupply}\\nPrice: ${formattedPriceEth} ETH (${formattedPriceDollars})\\nMarket cap: ${formattedMarketCapEth} ETH (${formattedMarketCapDollars})`;\n                },\n              },\n            },\n            {\n              showLine: true,\n              pointRadius: 0,\n              data: parseData(data),\n              datalabels: {\n                display: false,\n              },\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          aspectRatio: 4,\n          elements: {\n            line: {\n              borderColor: \"white\",\n            },\n            point: {\n              radius: 0,\n            },\n          },\n          plugins: {\n            legend: {\n              display: false,\n            },\n          },\n          scales: {\n            x: {\n              display: true,\n              grid: {\n                color: \"grey\",\n                tickColor: \"white\",\n                offset: false,\n              },\n              ticks: {\n                color: \"white\",\n              },\n              // min: 0,\n              // max: 5500000,\n              title: { display: true, text: \"PSI bought\", color: \"white\" },\n            },\n            y: {\n              display: true,\n              grid: {\n                color: \"grey\",\n              },\n              ticks: {\n                color: \"white\",\n                callback: function (ethPrice) {\n                  const formattedEthPrice = numeral(Number(ethPrice)).format(\n                    \"0.0000\"\n                  );\n                  const formattedDollarPrice = numeral(\n                    Number(ethPrice) * pointerData.etherPrice\n                  ).format(\"$0a\");\n                  return `${formattedEthPrice} ETH (${formattedDollarPrice})`;\n                },\n              },\n              title: { display: true, text: \"PSI price\", color: \"white\" },\n            },\n          },\n        },\n      });\n      setChartInstance(newChartInstance);\n      return function cleanup() {\n        newChartInstance.destroy();\n      };\n    }\n  }, [chartContainer]);\n\n  return (\n    // style={{ position: \"relative\", height: 100, width: \"100%\" }}\n    <div>\n      <canvas ref={chartContainer} />\n    </div>\n  );\n};\n\nexport default MyChart;\n","import { CSSProperties, useEffect, useState } from \"react\";\nimport background from \"./background.jpg\";\nimport \"./App.css\";\nimport psi50example from \"./images/00056-000032-0.5.jpg\";\nimport psi100example from \"./images/00056-000032-1.jpg\";\nimport psi200example from \"./images/00056-000032-2.jpg\";\nimport psi300example from \"./images/00056-000032-3.jpg\";\nimport { BlockchainInteraction } from \"./BlockchainInteraction\";\nimport { LargeGem, useInterval, fontStyles, Modal } from \"./Shared\";\nimport {\n  connectProvider,\n  getUserData,\n  getRecentGems,\n  getCurrentPsiData,\n} from \"./API\";\n\nimport {\n  Blockchain,\n  UserData,\n  GemData,\n  ModalData,\n  CurrentPsiData,\n} from \"./Types\";\nimport MyChart from \"./BondingCurveChart\";\nfunction App() {\n  const [blockchain, setBlockchain] = useState<Blockchain>();\n  const [userAddress, setUserAddress] = useState<string>();\n  const [recentGems, setRecentGems] = useState<GemData[]>();\n  const [userData, setUserData] = useState<UserData>();\n  const [currentPsiData, setCurrentPsiData] = useState<CurrentPsiData>();\n  const [modalData, setModalData] = useState<ModalData>();\n\n  // Get get recent gems from the graph\n  async function retrieveRecentGems() {\n    setRecentGems(await getRecentGems());\n  }\n  useEffect(() => {\n    retrieveRecentGems();\n  }, []);\n  useInterval(retrieveRecentGems, 5000);\n\n  // Get psi current data from cdn\n  async function retrieveCurrentPsiData() {\n    setCurrentPsiData(await getCurrentPsiData());\n  }\n  useEffect(() => {\n    retrieveCurrentPsiData();\n  }, []);\n  useInterval(retrieveCurrentPsiData, 5000);\n\n  // Connect the user and get user data the first time\n  async function triggerConnectProvider() {\n    const blockchain = await connectProvider();\n    const userAddress = await blockchain.provider.getSigner().getAddress();\n    const userData = await getUserData(blockchain, userAddress);\n    setBlockchain(blockchain);\n    setUserAddress(userAddress);\n    setUserData(userData);\n  }\n\n  // Get user data on an interval if the user is connected\n  useInterval(async () => {\n    if (!blockchain || !userAddress) {\n      return;\n    }\n    const userData = await getUserData(blockchain, userAddress);\n    setUserData(userData);\n  }, 5000);\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundImage: `url(${background})`,\n          backgroundPositionX: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundColor: \"black\",\n          width: \"100%\",\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n        }}\n      >\n        <DigDeeper />\n        <PageTitle />\n        {recentGems && (\n          <RecentGems gemData={recentGems} setModalData={setModalData} />\n        )}\n        <div\n          style={{\n            ...fontStyles,\n            maxWidth: \"1024px\",\n            padding: 30,\n          }}\n        >\n          <ExplainerText currentPsiData={currentPsiData} />\n\n          <BlockchainInteraction\n            blockchain={blockchain}\n            connectProvider={triggerConnectProvider}\n            userData={userData}\n            setModalData={setModalData}\n          />\n          <FAQ />\n        </div>\n      </div>\n      {modalData && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            background: \"rgba(0,0,0,0.5)\",\n            display: \"flex\",\n            justifyContent: \"space-evenly\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              ...fontStyles,\n              margin: 40,\n              overflow: \"auto\",\n              padding: 20,\n            }}\n          >\n            <Modal\n              blockchain={blockchain!}\n              modalData={modalData}\n              setModalData={setModalData}\n            />\n          </div>\n          <div\n            style={{\n              position: \"absolute\",\n              zIndex: -1,\n              top: 0,\n              bottom: 0,\n              left: 0,\n              right: 0,\n            }}\n            onClick={() => setModalData(undefined)}\n          ></div>\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction DigDeeper() {\n  return (\n    <div style={{ height: 1700, display: \"flex\", flexDirection: \"column\" }}>\n      <div style={{ height: \"80vh\" }}></div>\n      <div\n        style={{\n          background: \"rgba(0,0,0,0.5)\",\n          padding: 20,\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        <h1 style={{ color: \"rgb(217,213,207)\", margin: 0 }}>Dig deeper ↓</h1>\n      </div>\n    </div>\n  );\n}\n\nfunction PageTitle() {\n  return (\n    <div style={{ maxWidth: \"1202px\" }}>\n      <h1\n        className=\"display-3\"\n        style={{\n          color: \"rgb(217,213,207)\",\n          fontSize: 150,\n          textAlign: \"center\",\n          opacity: 0.8,\n        }}\n      >\n        Deep Gems\n      </h1>\n    </div>\n  );\n}\n\nfunction RecentGems({\n  gemData,\n  setModalData,\n}: {\n  gemData: GemData[];\n  setModalData: (modalData: ModalData) => void;\n}) {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        overflow: \"hidden\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          flexWrap: \"wrap\",\n          alignItems: \"center\",\n          marginBottom: 20,\n          height: 500,\n          alignContent: \"flex-end\",\n        }}\n        className=\"gem-slide\"\n      >\n        {gemData.map((gem, i) => (\n          <div\n            key={i}\n            onClick={() => setModalData({ type: \"TheirGemModal\", gem })}\n          >\n            <LargeGem gem={gem} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction ExplainerText({\n  currentPsiData,\n}: {\n  currentPsiData: CurrentPsiData | undefined;\n}) {\n  return (\n    <>\n      <p>\n        In a world of infinite reproducibility, the most precious asset is\n        uniqueness. Deep Gems is a GAN trained on a dataset of precious\n        gemstones and hooked up to the blockchain. Deep Gems allows you to\n        create and own completely unique virtual gemstones as NFTs. Nobody knows\n        what a Deep Gem will look like before the moment you forge it.\n      </p>\n      <h2>Forging gems with PSI</h2>\n      <p>\n        Deep Gems explores the concept of uniqueness with an increasingly scarce\n        token, called PSI. When you forge a Deep Gem, you must supply PSI\n        tokens. The more PSI a gem is forged with, the more unique it becomes.\n        At higher levels of PSI, gems become increasingly chaotic and\n        psychedelic. Forging a gem with a lot of PSI can result in a distorted\n        mess of colors, or it can result in a masterpiece.\n      </p>\n      <PSIDiagram />\n      <p>\n        Deep Gems invites you to explore and curate the neural network's\n        creations. If you've forged a lackluster gem, you can burn it or reforge\n        it to reuse its PSI tokens to create a new gem. This blurs the line\n        between artist and viewer. As gems are forged, reforged, traded and\n        sold, Deep Gems users will mine the depths of the neural network to find\n        the rarest and most precious gems.\n      </p>\n      <h2>PSI tokenomics</h2>\n      <div style={{ marginTop: 30, marginBottom: 30 }}>\n        {currentPsiData && <MyChart pointerData={currentPsiData} />}\n      </div>\n      <p>\n        2,500,000 PSI has been created, and is available for purchase on a\n        bonding curve. You can also sell PSI back to the curve. The more PSI is\n        bought, the higher the price goes. Every time anyone reforges or burns a\n        gem, 5% of the PSI in that gem is burned forever, permanently reducing\n        the supply.\n      </p>\n      <p>\n        <p>\n          Here are the{\" \"}\n          <a href=\"https://etherscan.io/address/0x6A746B25b240518cf26bdA877A969De85Db492b7#code\">\n            Deep Gems\n          </a>{\" \"}\n          and{\" \"}\n          <a href=\"https://etherscan.io/address/0x70d626dFE4BACaD28994469b6baC702979bdeB09#code\">\n            PSI\n          </a>{\" \"}\n          contracts. Be aware that they are completely unaudited, and you\n          interact with them at your own risk.\n        </p>\n      </p>\n    </>\n  );\n}\n\nfunction PSIDiagram() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        paddingTop: 40,\n        paddingBottom: 40,\n      }}\n    >\n      {[\n        [psi50example, \"50 PSI\"],\n        [psi100example, \"100 PSI\"],\n        [psi200example, \"400 PSI\"],\n        [psi300example, \"900 PSI\"],\n      ].map((data, i) => {\n        return (\n          <div key={i} style={{ maxWidth: 100, textAlign: \"center\" }}>\n            <img\n              src={data[0]}\n              alt=\"\"\n              style={{ paddingBottom: 20, width: \"100%\" }}\n            ></img>\n            {data[1]}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction FAQ() {\n  return (\n    <div style={{ marginTop: 100 }}>\n      <h1>FAQ</h1>\n      <h2>How does the bonding curve work?</h2>\n      <p>\n        The Deep Gems bonding curve is a true bonding curve, meaning that you\n        can not only buy PSI from it, but also sell PSI back to it with no fee\n        beyond the Ethereum gas fee. The supply is capped at 2,500,000 PSI.\n        After this, no more PSI can be bought from the curve. After this point,\n        people wanting to buy PSI will have to buy it from an exchange, such as\n        Uniswap.\n      </p>\n\n      <h2>What do \"forge\", \"reforge\", \"activate\", and \"burn\" do?</h2>\n      <p>\n        Because we want people to be able to explore the neural network as much\n        as possible, we've engineered the forging process to use as little gas\n        as possible. When you forge a gem, you own it on the blockchain, but it\n        is not yet a full-fledged NFT. You can reforge it as often as you want,\n        while paying as little gas as possible, but each time you reforge, 5% of\n        the PSI in the gem is burned. Once you activate it, the gem becomes a\n        full NFT. It can no longer be reforged, but it can be transfered and\n        sold on NFT exchanges. Burning a gem refunds the PSI tokens that were in\n        it, minus 5%. You can burn a gem whether it is activated or not.\n      </p>\n      <h2>How are the gem images rendered and stored?</h2>\n      <p>\n        When you forge a gem, an event is emitted by the Deep Gems contract\n        which is picked up by a server running the neural network. You can get\n        the trained neural network{\" \"}\n        <a href=\"https://colab.research.google.com/drive/1yh7C_GND4nV_VTiL-vl6I9twxNdCzdui\">\n          here\n        </a>\n        . The server parses the gem's seed and PSI level out of the tokenId, and\n        feeds this information into the neural net to render the gem image. It\n        then uploads the image to another server which serves it when you view\n        it on this site, an NFT exchange, or any other site.\n      </p>\n      <p>\n        This sounds kind of centralized, but it's not. When you forge or buy a\n        gem, you are taking ownership of that gem's seed, which is irrevocably\n        stored on the Ethereum blockchain. If this server were to ever go down,\n        you could always recreate the gem image using the neural network that we\n        have open sourced. You can even try it yourself right now. Copy a gem's\n        tokenId from this site or an NFT exchange, and paste it into this{\" \"}\n        <a href=\"https://colab.research.google.com/drive/1yh7C_GND4nV_VTiL-vl6I9twxNdCzdui\">\n          notebook\n        </a>\n        . The open source neural network will let you view the gem.\n      </p>\n      <h2>What is a GAN?</h2>\n      <p>\n        A GAN (or Generative Adversarial Network) is a neural network that is\n        able to generate unique images from a random value called a \"seed\".\n        We've trained our GAN (using the StyleGAN2-ADA architecure) on a dataset\n        of 15,000 gemstones collected from around the internet, cleaned,\n        cropped, and curated to keep only the finest specimens. The trained\n        neural network is available{\" \"}\n        <a href=\"https://colab.research.google.com/drive/1yh7C_GND4nV_VTiL-vl6I9twxNdCzdui\">\n          here\n        </a>\n        .\n      </p>\n      <h2>How does PSI work?</h2>\n      <p>\n        The StyleGAN2-ADA architecure takes a parameter called \"truncation_psi\",\n        which determines how far from the average image in the dataset a result\n        will be. This is the basis for the PSI token. Forging a gem with higher\n        PSI increases this parameter, making the gem more unique. Forging a gem\n        with 0 PSI outputs the average gemstone, and will always look the same.\n      </p>\n      <h2>How are the gem seeds generated? How random are they really?</h2>\n      <p>\n        Gems are intended to be random. However, we are using the Ethereum block\n        hash as a random number, and this can be manipulated by miners. But\n        given that a gem's value is only determined by how attractive it is,\n        there isn't much harm in letting miners choose which gem they will mine.\n        The only possible attack is one where a miner is able to forge a gem\n        that looks exactly like another one that has already been forged (for\n        example, a gem that sold for a lot of money). We take various steps to\n        prevent this kind of attack.\n      </p>\n      <p>\n        When you hit the \"Forge\" button, a gem's 128 bit seed is generated from\n        3 different elements. The first is a counter of all gems (the \"edition\n        number\"). This takes up the vast majority of the seed, 120 bits. Then we\n        take 4 bits of the block hash of the block one block ago, and 4 bits of\n        the block hash 255 blocks ago. So a malicious miner can at most choose\n        between 256 (2^8) different gems at each counter number. A malicious\n        miner could also try to manipulate the counter, by forging a large\n        number of gems in a block (remember, if they mine the block themselves,\n        they don't have to pay gas for each forging). We constrain this by\n        making the minimum amount of PSI that you can forge a gem with 0.1 PSI.\n        A miner would have to spend a lot of money buying PSI to be able to\n        search for an identical-looking gem.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}