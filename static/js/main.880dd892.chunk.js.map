{"version":3,"sources":["background.jpg","images/0psi.jpg","images/100psi.jpg","images/300psi.jpg","GenericComponents.tsx","BlockchainInteraction.tsx","API.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["require","ethers","utils","formatEther","parseEther","TextInput","style","setInput","input","backgroundColor","paddingLeft","paddingRight","display","fontFamily","type","value","onChange","e","target","Button","children","onClick","active","undefined","background","padding","cursor","CheapGemSpinner","width","height","viewBox","d","fill","attributeName","from","to","dur","repeatCount","IMAGES_CDN","fe","pe","BlockchainInteraction","connectProvider","blockchain","userData","setModalData","position","justifyContent","paddingTop","paddingBottom","BuyPSIBox","ForgeAGemBox","YourGems","top","left","right","bottom","alignItems","useState","mode","setMode","buy","sell","formStates","setFormStates","psiInputAmounts","setPsiInputAmounts","ethEstimates","setEthEstimates","debounceIDs","setDebounceIDs","setForm","psiInputBigNum","debounceID","clearTimeout","timeoutID","setTimeout","a","psi","quoteMint","quoteBurn","estimate","formInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","color","mint","burn","Modal","modalData","backgroundImage","tokenId","backgroundSize","backgroundRepeat","gems","reforge","activate","fontSize","marginTop","marginBottom","psiForm","setPsiForm","psiInputAmount","setPsiInputAmount","psiBalance","console","log","forge","lte","flexWrap","map","gem","Gem","margin","borderRadius","overflow","className","gemArtifact","psiArtifact","GRAPHQL_URL","GEMS_CONTRACT","PSI_CONTRACT","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","network","cacheProvider","recentGemsQuery","userGemsQuery","getRecentGems","fetch","method","headers","Accept","body","JSON","stringify","query","json","data","getUserData","userAddress","variables","balanceOf","providers","Web3Provider","connect","provider","Contract","abi","getSigner","fontStyles","fontWeight","DigDeeper","flexDirection","PageTitle","maxWidth","textAlign","opacity","RecentGems","gemData","whiteSpace","RecentGem","marginRight","ExplainerText","psi0example","psi100example","psi300example","src","App","setBlockchain","setUserAddress","setUserData","recentGems","useAPIPolling","fetchFunc","initialState","getAddress","backgroundPositionX","overflowY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.880dd892.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.2d8f010b.jpg\";","export default __webpack_public_path__ + \"static/media/0psi.dc13b2be.jpg\";","export default __webpack_public_path__ + \"static/media/100psi.adb79865.jpg\";","export default __webpack_public_path__ + \"static/media/300psi.2ea35d72.jpg\";","import React, { ReactNode, useState } from \"react\";\nimport background from \"./background.jpg\";\nimport \"./App.css\";\nimport psi0example from \"./images/0psi.jpg\";\nimport psi100example from \"./images/100psi.jpg\";\nimport psi300example from \"./images/300psi.jpg\";\nimport useAPIPolling, { APIPollingOptions } from \"use-api-polling\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport { DeepGems } from \"../../solidity/typechain/DeepGems\";\nimport { PSI } from \"../../solidity/typechain/PSI\";\nimport { Blockchain, BlockchainInteraction } from \"./BlockchainInteraction\";\nconst gemArtifact = require(\"./DeepGems.json\");\nconst psiArtifact = require(\"./PSI.json\");\n\nconst GRAPHQL_URL = \"http://localhost:8000/subgraphs/name/jtremback/deepgems\";\nconst IMAGES_CDN = \"https://deepgemscache.s3.us-west-2.amazonaws.com/\";\nconst GEMS_CONTRACT = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nconst PSI_CONTRACT = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\nconst fe = ethers.utils.formatEther;\nconst pe = ethers.utils.parseEther;\n\nexport function TextInput({\n  style,\n  setInput,\n  input,\n}: {\n  style?: React.CSSProperties;\n  setInput: (x: string) => void;\n  input: string;\n}) {\n  return (\n    <input\n      style={{\n        backgroundColor: \"grey\",\n        paddingLeft: 10,\n        paddingRight: 10,\n        display: \"block\",\n        fontFamily: \"Inconsolata\",\n        ...style,\n      }}\n      type=\"text\"\n      value={input}\n      onChange={(e) => setInput(e.target.value)}\n    />\n  );\n}\n\nexport function Button({\n  children,\n  onClick,\n  active,\n}: {\n  children: ReactNode;\n  onClick?: React.MouseEventHandler;\n  active?: boolean;\n}) {\n  if (active === undefined) {\n    active = true;\n  }\n  return (\n    <button\n      onClick={active ? onClick : undefined}\n      type=\"button\"\n      style={{\n        fontFamily: \"Bebas Neue\",\n        background: active ? \"blue\" : \"gray\",\n        display: \"block\",\n        padding: \"10px 20px\",\n        cursor: active ? \"pointer\" : \"auto\",\n      }}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function CheapGemSpinner() {\n  return (\n    <svg width=\"100px\" height=\"100px\" viewBox=\"0 0 128 128\">\n      <g>\n        <path\n          d=\"M64 128A64 64 0 0 1 18.34 19.16L21.16 22a60 60 0 1 0 52.8-17.17l.62-3.95A64 64 0 0 1 64 128z\"\n          fill=\"#ffffff\"\n        />\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          from=\"0 64 64\"\n          to=\"360 64 64\"\n          dur=\"2400ms\"\n          repeatCount=\"indefinite\"\n        ></animateTransform>\n      </g>\n    </svg>\n  );\n}\n\nexport function GemSpinner() {\n  return (\n    <svg\n      width=\"100px\"\n      height=\"100px\"\n      viewBox=\"0 0 100 100\"\n      preserveAspectRatio=\"xMidYMid\"\n    >\n      <defs>\n        <filter id=\"f1\" x=\"0\" y=\"0\">\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n        </filter>\n      </defs>\n      <g transform=\"translate(50 50)\" filter=\"url(#f1)\">\n        <g transform=\"scale(0.7)\">\n          <g transform=\"translate(-50 -50)\">\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"0.7575757575757576s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#ea3f34\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"1.0101010101010102s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#f2982c\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(90 50 50)\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"1.5151515151515151s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#52a360\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(180 50 50)\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"3.0303030303030303s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#674794\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(270 50 50)\"\n              ></path>\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  );\n}\n","import React, { ReactNode, useEffect, useState, useRef } from \"react\";\nimport background from \"./background.jpg\";\nimport \"./App.css\";\nimport psi0example from \"./images/0psi.jpg\";\nimport psi100example from \"./images/100psi.jpg\";\nimport psi300example from \"./images/300psi.jpg\";\nimport useAPIPolling, { APIPollingOptions } from \"use-api-polling\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { BigNumber, ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport { DeepGems } from \"../../solidity/typechain/DeepGems\";\nimport { PSI } from \"../../solidity/typechain/PSI\";\nimport {\n  Button,\n  TextInput,\n  GemSpinner,\n  CheapGemSpinner,\n} from \"./GenericComponents\";\nimport { UserData } from \"./API\";\nconst gemArtifact = require(\"./DeepGems.json\");\nconst psiArtifact = require(\"./PSI.json\");\n\nconst GRAPHQL_URL = \"http://localhost:8000/subgraphs/name/jtremback/deepgems\";\nconst IMAGES_CDN = \"https://deepgemscache.s3.us-west-2.amazonaws.com/\";\nconst GEMS_CONTRACT = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nconst PSI_CONTRACT = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\nconst fe = ethers.utils.formatEther;\nconst pe = ethers.utils.parseEther;\n\nexport type Blockchain = {\n  provider: ethers.providers.Web3Provider;\n  gems: DeepGems;\n  psi: PSI;\n};\n\nexport function BlockchainInteraction({\n  connectProvider,\n  blockchain,\n  userData,\n  setModalData,\n}: {\n  connectProvider: () => void;\n  blockchain?: Blockchain;\n  userData?: UserData;\n  setModalData: (x: ModalData) => void;\n}) {\n  return (\n    <div style={{ position: \"relative\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          paddingTop: 40,\n          paddingBottom: 40,\n        }}\n      >\n        <>\n          <BuyPSIBox blockchain={blockchain} setModalData={setModalData} />\n          <ForgeAGemBox blockchain={blockchain} userData={userData} />\n        </>\n      </div>\n      {blockchain && (\n        <YourGems\n          blockchain={blockchain!}\n          userData={userData!}\n          setModalData={setModalData}\n        />\n      )}\n      {!blockchain && (\n        <div\n          style={{\n            position: \"absolute\",\n            background: \"rgba(0,0,0,0.8)\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button onClick={connectProvider}>Connect Wallet</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// If there is a number entered into the buy or sell box, the blockchain should be polled to get the current price\n//\n\nfunction useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [callback, delay]);\n}\n\nfunction BuyPSIBox({\n  blockchain,\n  setModalData,\n}: {\n  blockchain?: Blockchain;\n  setModalData: (x: ModalData) => void;\n}) {\n  const [mode, setMode] = useState<\"buy\" | \"sell\">(\"buy\");\n  const [formStates, setFormStates] = useState<{\n    buy: string;\n    sell: string;\n  }>({\n    buy: \"\",\n    sell: \"\",\n  });\n  const [psiInputAmounts, setPsiInputAmounts] = useState<{\n    buy?: BigNumber;\n    sell?: BigNumber;\n  }>({});\n  const [ethEstimates, setEthEstimates] = useState<{\n    buy?: BigNumber;\n    sell?: BigNumber;\n  }>({});\n  const [debounceIDs, setDebounceIDs] = useState<{\n    buy?: NodeJS.Timeout;\n    sell?: NodeJS.Timeout;\n  }>({});\n\n  function setForm(type: \"buy\" | \"sell\", input: string) {\n    // Set form state\n    setFormStates({\n      ...formStates,\n      [type]: input,\n    });\n\n    const debounceID = debounceIDs[type];\n\n    // Cancel previous request\n    if (debounceID) {\n      clearTimeout(debounceID);\n    }\n\n    let psiInputBigNum: BigNumber;\n    // Try to parse input as bigNum.\n    try {\n      psiInputBigNum = pe(input);\n    } catch (e) {\n      // If it does not succeed, set the estimates and\n      // the input amounts to undefined and exit\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: undefined,\n      });\n      setPsiInputAmounts({\n        ...psiInputAmounts,\n        [type]: undefined,\n      });\n      return;\n    }\n\n    // if it does succeed set the input amounts and prepare to make\n    // delayed query\n    setPsiInputAmounts({\n      ...psiInputAmounts,\n      [type]: psiInputBigNum,\n    });\n\n    // Set to undefined to get loading spinner\n    setEthEstimates({ ...ethEstimates, [type]: undefined });\n\n    // Set timeout to make request and set estimate\n    const timeoutID = setTimeout(async () => {\n      const estimate =\n        type === \"buy\"\n          ? await blockchain!.psi.quoteMint(psiInputBigNum)\n          : await blockchain!.psi.quoteBurn(psiInputBigNum);\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: estimate,\n      });\n    }, 1000);\n\n    setDebounceIDs({ ...debounceIDs, [type]: timeoutID });\n  }\n\n  async function formInterval(type: \"buy\" | \"sell\") {\n    // If there is a correctly parsed psi input, get the estimate and\n    // set it here. If the input did not parse correctly, this will be skipped\n    if (psiInputAmounts[type]) {\n      const estimate =\n        type === \"buy\"\n          ? await blockchain!.psi.quoteMint(psiInputAmounts[type]!)\n          : await blockchain!.psi.quoteBurn(psiInputAmounts[type]!);\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: estimate,\n      });\n    }\n  }\n\n  useInterval(() => {\n    if (mode === \"buy\") {\n      formInterval(\"buy\");\n    } else {\n      formInterval(\"sell\");\n    }\n  }, 5000);\n\n  return (\n    <div style={{ background: \"rgb(27,23,20)\", padding: 40 }}>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <h2\n          onClick={() => setMode(\"buy\")}\n          style={mode == \"buy\" ? {} : { color: \"grey\", cursor: \"pointer\" }}\n        >\n          Buy PSI\n        </h2>\n        <h2\n          onClick={() => setMode(\"sell\")}\n          style={mode == \"sell\" ? {} : { color: \"grey\", cursor: \"pointer\" }}\n        >\n          Sell PSI\n        </h2>\n      </div>\n      {mode == \"buy\" ? (\n        <form>\n          <p>Amount of PSI to buy:</p>\n          <p>\n            <TextInput\n              input={formStates.buy}\n              setInput={(input) => setForm(\"buy\", input)}\n            />\n          </p>\n          <p>Estimated ETH required:</p>\n          <p style={{ fontFamily: \"Inconsolata\" }}>\n            {ethEstimates.buy ? `${fe(ethEstimates.buy)} ETH` : \"...\"}\n          </p>\n          <Button\n            active={!!psiInputAmounts.buy && !!ethEstimates.buy}\n            onClick={() => {\n              blockchain!.psi.mint(psiInputAmounts.buy!, {\n                value: ethEstimates.buy!,\n              });\n            }}\n          >\n            Buy\n          </Button>\n        </form>\n      ) : (\n        <form>\n          <p>Amount of PSI to sell:</p>\n          <p>\n            <TextInput\n              input={formStates.sell}\n              setInput={(input) => setForm(\"sell\", input)}\n            />\n          </p>\n          <p>Estimated ETH earned:</p>\n          <p style={{ fontFamily: \"Inconsolata\" }}>\n            {ethEstimates.sell ? `${fe(ethEstimates.sell)} ETH` : \"...\"}\n          </p>\n          <Button\n            active={!!psiInputAmounts.sell && !!ethEstimates.sell}\n            onClick={() => {\n              blockchain!.psi.burn(psiInputAmounts.sell!, ethEstimates.sell!);\n            }}\n          >\n            Sell\n          </Button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport type ModalData = GemModalData;\n\nexport type GemModalData = {\n  type: \"GemModal\";\n  tokenId: string;\n};\n\nexport function Modal({\n  modalData,\n  blockchain,\n}: {\n  modalData: ModalData;\n  blockchain: Blockchain;\n}) {\n  switch (modalData.type) {\n    case \"GemModal\":\n      return (\n        <div\n          style={{\n            width: 256,\n          }}\n        >\n          <div\n            style={{\n              backgroundImage: `url(${IMAGES_CDN}${modalData.tokenId}.jpg)`,\n              backgroundSize: \"cover\",\n              backgroundRepeat: \"no-repeat\",\n              width: 256,\n              height: 256,\n            }}\n          />\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <Button\n              onClick={() => {\n                blockchain!.gems.reforge(modalData.tokenId);\n              }}\n            >\n              Reforge\n            </Button>\n            <Button\n              onClick={() => {\n                blockchain!.gems.burn(modalData.tokenId);\n              }}\n            >\n              Burn\n            </Button>\n            <Button\n              onClick={() => {\n                blockchain!.gems.activate(modalData.tokenId);\n              }}\n            >\n              Activate\n            </Button>\n          </div>\n          <div style={{ fontSize: 16, marginTop: 10, marginBottom: 10 }}>\n            Reforging a gem creates a new gem using 99% of this gem's PSI.\n            Burning a gem destroys the gem and adds the PSI to your account.\n          </div>\n        </div>\n      );\n  }\n}\n\nfunction ForgeAGemBox({\n  userData,\n  blockchain,\n}: {\n  userData?: UserData;\n  blockchain?: Blockchain;\n}) {\n  const [psiForm, setPsiForm] = useState(\"\");\n  const [psiInputAmount, setPsiInputAmount] = useState<BigNumber>();\n\n  function setForm(input: string) {\n    // Set form state\n    setPsiForm(input);\n    let psiInputBigNum: BigNumber;\n    // Try to parse input as bigNum.\n    try {\n      psiInputBigNum = pe(input);\n    } catch (e) {\n      // Set to undefined if it doesn't work\n      setPsiInputAmount(undefined);\n      return;\n    }\n    setPsiInputAmount(psiInputBigNum);\n  }\n\n  return (\n    <div style={{ background: \"rgb(27,23,20)\", padding: 40 }}>\n      <h2>Forge a Gem</h2>\n      <form>\n        <p>Amount of PSI to forge the gem with:</p>\n        <p>\n          <TextInput input={psiForm} setInput={setForm} />\n        </p>\n        <p>Your PSI balance:</p>\n        <p style={{ fontFamily: \"Inconsolata\" }}>\n          {userData && fe(userData.psiBalance)} PSI\n        </p>\n        <Button\n          onClick={() => {\n            console.log(\"forging\");\n            psiInputAmount && blockchain!.gems.forge(psiInputAmount);\n          }}\n          active={!!psiInputAmount && psiInputAmount.lte(userData!.psiBalance)}\n        >\n          Forge\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nfunction YourGems({\n  userData,\n  blockchain,\n  setModalData,\n}: {\n  userData: UserData;\n  blockchain: Blockchain;\n  setModalData: (x: ModalData) => void;\n}) {\n  return (\n    <>\n      <h2>Your gems:</h2>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {userData &&\n          userData.gems.map((gem) => {\n            return (\n              <Gem\n                style={{ margin: 5 }}\n                tokenId={gem.id}\n                setModalData={setModalData}\n              />\n            );\n          })}\n      </div>\n    </>\n  );\n}\n\nfunction Gem({\n  style,\n  tokenId,\n  setModalData,\n}: {\n  style?: React.CSSProperties;\n  tokenId: string;\n  setModalData: (x: ModalData) => void;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: 1000,\n        width: 100,\n        height: 100,\n        overflow: \"hidden\",\n        ...style,\n      }}\n    >\n      <div\n        style={{\n          overflow: \"hidden\",\n        }}\n        onClick={() =>\n          setModalData({\n            type: \"GemModal\",\n            tokenId,\n          })\n        }\n      >\n        <div\n          style={{\n            backgroundImage: `url(${IMAGES_CDN}${tokenId}.jpg)`,\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n            width: 100,\n            height: 100,\n          }}\n        />\n        <div className=\"hue-rotate\">\n          <CheapGemSpinner />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { ReactNode, useState } from \"react\";\nimport background from \"./background.jpg\";\nimport \"./App.css\";\nimport psi0example from \"./images/0psi.jpg\";\nimport psi100example from \"./images/100psi.jpg\";\nimport psi300example from \"./images/300psi.jpg\";\nimport useAPIPolling, { APIPollingOptions } from \"use-api-polling\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { ethers, BigNumber } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport { DeepGems } from \"../../solidity/typechain/DeepGems\";\nimport { PSI } from \"../../solidity/typechain/PSI\";\nimport { Blockchain, BlockchainInteraction } from \"./BlockchainInteraction\";\nconst gemArtifact = require(\"./DeepGems.json\");\nconst psiArtifact = require(\"./PSI.json\");\n\nconst GRAPHQL_URL = \"http://localhost:8000/subgraphs/name/jtremback/deepgems\";\nconst IMAGES_CDN = \"https://deepgemscache.s3.us-west-2.amazonaws.com/\";\nconst GEMS_CONTRACT = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nconst PSI_CONTRACT = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\nconst fe = ethers.utils.formatEther;\nconst pe = ethers.utils.parseEther;\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: \"INFURA_ID\", // required\n    },\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nconst recentGemsQuery = `{\n  gems(orderBy: forgeTime, orderDirection: desc, first: 7, where: { burned: false }){\n    id\n    psi\n    owner\n    forgeTime\n    forgeBlock\n  }\n}`;\n\nconst userGemsQuery = `query UserGems($userAddress: Bytes!) {\n  gems(orderBy:forgeTime, orderDirection: asc, where: { owner: $userAddress, burned: false }){\n    id\n    psi\n    owner\n    forgeTime\n    forgeBlock\n  }\n}`;\n\nexport async function getRecentGems() {\n  return (\n    await (\n      await fetch(GRAPHQL_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({ query: recentGemsQuery }),\n      })\n    ).json()\n  ).data.gems;\n}\n\nexport async function getUserData(\n  blockchain?: Blockchain,\n  userAddress?: string\n) {\n  console.log(\"GETUSERDDDAATA\", blockchain, userAddress);\n  if (!blockchain || !userAddress) {\n    return;\n  }\n\n  const gems = (\n    await (\n      await fetch(GRAPHQL_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({\n          query: userGemsQuery,\n          variables: {\n            userAddress,\n          },\n        }),\n      })\n    ).json()\n  ).data.gems;\n\n  const psiBalance = await blockchain.psi.balanceOf(userAddress);\n\n  return { gems, psiBalance };\n}\n\nexport type GemData = {\n  id: string;\n};\n\nexport type UserData = {\n  psiBalance: BigNumber;\n  gems: GemData[];\n};\n\nexport async function connectProvider() {\n  //  Enable session (triggers QR Code modal)\n  const provider = new ethers.providers.Web3Provider(await web3Modal.connect());\n  const gems = (new ethers.Contract(\n    GEMS_CONTRACT,\n    gemArtifact.abi,\n    provider.getSigner()\n  ) as any) as DeepGems;\n\n  const psi = (new ethers.Contract(\n    PSI_CONTRACT,\n    psiArtifact.abi,\n    provider.getSigner()\n  ) as any) as PSI;\n  return { provider, gems, psi };\n}\n","import React, {\n  CSSProperties,\n  ReactNode,\n  useEffect,\n  useState,\n  useRef,\n} from \"react\";\nimport background from \"./background.jpg\";\nimport \"./App.css\";\nimport psi0example from \"./images/0psi.jpg\";\nimport psi100example from \"./images/100psi.jpg\";\nimport psi300example from \"./images/300psi.jpg\";\nimport useAPIPolling, { APIPollingOptions } from \"use-api-polling\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { ethers, BigNumber } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport { DeepGems } from \"../../solidity/typechain/DeepGems\";\nimport { PSI } from \"../../solidity/typechain/PSI\";\nimport { Blockchain, BlockchainInteraction } from \"./BlockchainInteraction\";\nimport {\n  connectProvider,\n  UserData,\n  GemData,\n  getUserData,\n  getRecentGems,\n} from \"./API\";\nimport { Modal, ModalData } from \"./BlockchainInteraction\";\nconst gemArtifact = require(\"./DeepGems.json\");\nconst psiArtifact = require(\"./PSI.json\");\n\nconst GRAPHQL_URL =\n  \"https://api.thegraph.com/subgraphs/name/jtremback/deepgems\";\nconst IMAGES_CDN = \"https://deepgemscache.s3.us-west-2.amazonaws.com/\";\nconst GEMS_CONTRACT = \"0xc5b323c98550D552d55b21d6dD370E5798373709\";\nconst PSI_CONTRACT = \"0xA041c8D7278690C5310cFc4849d0f11A4Adb19C5\";\n\nconst fe = ethers.utils.formatEther;\nconst pe = ethers.utils.parseEther;\n\nfunction useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [callback, delay]);\n}\n\nconst fontStyles: CSSProperties = {\n  fontSize: 24,\n  fontWeight: \"lighter\",\n  color: \"white\",\n  backgroundColor: \"rgba(0,0,0,0.7)\",\n};\n\nfunction App() {\n  const [blockchain, setBlockchain] = useState<Blockchain>();\n  const [userAddress, setUserAddress] = useState<string>();\n  const [userData, setUserData] = useState<UserData>();\n  const [modalData, setModalData] = useState<ModalData>();\n\n  // TODO: get rid of this api polling hook thing cause\n  // it sucks and do it yourself with useInterval\n  const recentGems = useAPIPolling<GemData[]>({\n    fetchFunc: getRecentGems,\n    initialState: [],\n    delay: 5000,\n  });\n\n  function getBlockchain() {\n    return blockchain;\n  }\n\n  useInterval(async () => {\n    const userData = await getUserData(blockchain, userAddress);\n    setUserData(userData);\n  }, 5000);\n\n  async function triggerConnectProvider() {\n    const blockchain = await connectProvider();\n    setBlockchain(blockchain);\n    setUserAddress(await blockchain.provider.getSigner().getAddress());\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundImage: `url(${background})`,\n          backgroundPositionX: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundColor: \"black\",\n          width: \"100%\",\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n        }}\n      >\n        <DigDeeper />\n        <PageTitle />\n        <RecentGems gemData={recentGems} />\n        <div\n          style={{\n            ...fontStyles,\n            maxWidth: \"1024px\",\n            padding: 30,\n          }}\n        >\n          <ExplainerText />\n          <BlockchainInteraction\n            blockchain={blockchain}\n            connectProvider={triggerConnectProvider}\n            userData={userData}\n            setModalData={setModalData}\n          />\n        </div>\n      </div>\n      {modalData && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            background: \"rgba(0,0,0,0.5)\",\n            display: \"flex\",\n            justifyContent: \"space-evenly\",\n            alignItems: \"center\",\n          }}\n          onClick={() => setModalData(undefined)}\n        >\n          <div\n            style={{\n              ...fontStyles,\n              margin: 40,\n              overflow: \"auto\",\n              padding: 20,\n            }}\n          >\n            <Modal blockchain={blockchain!} modalData={modalData} />\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction DigDeeper() {\n  return (\n    <div style={{ height: 1700, display: \"flex\", flexDirection: \"column\" }}>\n      <div style={{ height: \"80vh\" }}></div>\n      <div\n        style={{\n          background: \"rgba(0,0,0,0.5)\",\n          padding: 20,\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        <h1 style={{ color: \"rgb(217,213,207)\", margin: 0 }}>Dig deeper ↓</h1>\n      </div>\n    </div>\n  );\n}\n\nfunction PageTitle() {\n  return (\n    <div style={{ maxWidth: \"1202px\" }}>\n      <h1\n        className=\"display-3\"\n        style={{\n          color: \"rgb(217,213,207)\",\n          fontSize: 150,\n          textAlign: \"center\",\n          opacity: 0.8,\n        }}\n      >\n        Deep Gems\n      </h1>\n    </div>\n  );\n}\n\nfunction RecentGems({ gemData }: { gemData: GemData[] }) {\n  return (\n    <div style={{ overflow: \"hidden\", width: \"100%\", whiteSpace: \"nowrap\" }}>\n      {gemData.map((gem) => (\n        <RecentGem gem={gem} />\n      ))}\n    </div>\n  );\n}\n\nfunction RecentGem({\n  style,\n  gem,\n}: {\n  style?: React.CSSProperties;\n  gem: GemData;\n}) {\n  return (\n    <div\n      style={{\n        width: 300,\n        height: 300,\n        backgroundImage: `url(${IMAGES_CDN}${gem.id}.jpg)`,\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundColor: \"black\",\n        borderRadius: 10000,\n        marginRight: 40,\n        marginBottom: 40,\n        display: \"inline-block\",\n        ...style,\n      }}\n    ></div>\n  );\n}\n\nfunction ExplainerText() {\n  return (\n    <>\n      Deep Gems are completely unique AI-generated NFT gemstones. Some are\n      beautiful, some are ugly. Only one gem can be mined every block. Deep Gems\n      are powered by PSI. You can mine a gem without any PSI, but it will be\n      boring. Every PSI-less gem looks exactly the same. When you mine a gem\n      with PSI, it takes on a more distinct color and form. You see that none of\n      the other infinite possible Deep Gems is exactly like yours. The more PSI\n      you add, the more interesting your gem becomes.\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          paddingTop: 40,\n          paddingBottom: 40,\n        }}\n      >\n        {[\n          [psi0example, \"0 PSI\"],\n          [psi100example, \"100 PSI\"],\n          [psi300example, \"300 PSI\"],\n        ].map((data) => {\n          return (\n            <div style={{ maxWidth: 200, textAlign: \"center\" }}>\n              <img\n                src={data[0]}\n                style={{ paddingBottom: 20, width: \"100%\" }}\n              ></img>\n              {data[1]}\n            </div>\n          );\n        })}\n      </div>\n      You can get PSI on a bonding curve. The more people get into Deep Gems,\n      the more it will cost you. You can also burn an existing gem to get its\n      PSI back out. But be careful! When you burn a gem you only get 99% of its\n      PSI out. 1% is lost forever.\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}