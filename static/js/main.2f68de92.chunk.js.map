{"version":3,"sources":["background.jpg","images/00056-000032-0.5.jpg","images/00056-000032-1.jpg","images/00056-000032-2.jpg","images/00056-000032-3.jpg","GenericComponents.tsx","BlockchainInteraction.tsx","API.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextInput","style","setInput","input","backgroundColor","paddingLeft","paddingRight","display","fontFamily","type","value","onChange","e","target","Button","children","onClick","active","undefined","background","padding","cursor","CheapGemSpinner","size","width","height","viewBox","d","fill","attributeName","from","to","dur","repeatCount","IMAGES_CDN","fe","ethers","utils","formatEther","pe","parseEther","BlockchainInteraction","connectProvider","blockchain","userData","setModalData","position","justifyContent","paddingTop","paddingBottom","BuyPSIBox","ForgeAGemBox","YourGems","top","left","right","bottom","alignItems","useState","mode","setMode","buy","sell","formStates","setFormStates","psiInputAmounts","setPsiInputAmounts","ethEstimates","setEthEstimates","debounceIDs","setDebounceIDs","setForm","psiInputBigNum","debounceID","clearTimeout","timeoutID","setTimeout","a","psi","quoteBuy","quoteSell","estimate","formInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","color","Modal","modalData","backgroundImage","tokenId","backgroundSize","backgroundRepeat","marginBottom","marginRight","gems","reforge","fontSize","burn","activate","psiForm","setPsiForm","psiInputAmount","setPsiInputAmount","psiBalance","console","log","forge","lte","flexWrap","map","gem","Gem","margin","showImage","setShowImage","overflow","alt","src","onError","GRAPHQL_URL","GEMS_CONTRACT","PSI_CONTRACT","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","network","cacheProvider","recentGemsQuery","userGemsQuery","getRecentGems","fetch","method","headers","Accept","body","JSON","stringify","query","json","graphGems","data","getUserData","userAddress","variables","balanceOf","providers","Web3Provider","connect","provider","Contract","gemArtifact","abi","getSigner","psiArtifact","fontStyles","fontWeight","DigDeeper","flexDirection","PageTitle","maxWidth","className","textAlign","opacity","RecentGems","gemData","whiteSpace","RecentGem","number","ExplainerText","psi50example","psi100example","psi200example","psi300example","App","setBlockchain","setUserAddress","setUserData","recentGems","useAPIPolling","fetchFunc","initialState","getAddress","backgroundPositionX","overflowY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f68de92.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.2d8f010b.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-0.5.963feb29.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-1.c709deab.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-2.3a5d78de.jpg\";","export default __webpack_public_path__ + \"static/media/00056-000032-3.7b8499fc.jpg\";","import React, { ReactNode } from \"react\";\nimport \"./App.css\";\n\nexport function TextInput({\n  style,\n  setInput,\n  input,\n}: {\n  style?: React.CSSProperties;\n  setInput: (x: string) => void;\n  input: string;\n}) {\n  return (\n    <input\n      style={{\n        backgroundColor: \"grey\",\n        paddingLeft: 10,\n        paddingRight: 10,\n        display: \"block\",\n        fontFamily: \"Inconsolata\",\n        ...style,\n      }}\n      type=\"text\"\n      value={input}\n      onChange={(e) => setInput(e.target.value)}\n    />\n  );\n}\n\nexport function Button({\n  children,\n  onClick,\n  active,\n}: {\n  children: ReactNode;\n  onClick?: React.MouseEventHandler;\n  active?: boolean;\n}) {\n  if (active === undefined) {\n    active = true;\n  }\n  return (\n    <button\n      onClick={active ? onClick : undefined}\n      type=\"button\"\n      style={{\n        fontFamily: \"Bebas Neue\",\n        background: active ? \"blue\" : \"gray\",\n        display: \"block\",\n        padding: \"10px 20px\",\n        cursor: active ? \"pointer\" : \"auto\",\n      }}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function CheapGemSpinner({ size }: { size: number }) {\n  return (\n    <svg width={`${size}px`} height={`${size}px`} viewBox=\"0 0 128 128\">\n      <g>\n        <path\n          d=\"M64 128A64 64 0 0 1 18.34 19.16L21.16 22a60 60 0 1 0 52.8-17.17l.62-3.95A64 64 0 0 1 64 128z\"\n          fill=\"#ffffff\"\n        />\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          from=\"0 64 64\"\n          to=\"360 64 64\"\n          dur=\"2400ms\"\n          repeatCount=\"indefinite\"\n        ></animateTransform>\n      </g>\n    </svg>\n  );\n}\n\nexport function GemSpinner() {\n  return (\n    <svg\n      width=\"100px\"\n      height=\"100px\"\n      viewBox=\"0 0 100 100\"\n      preserveAspectRatio=\"xMidYMid\"\n    >\n      <defs>\n        <filter id=\"f1\" x=\"0\" y=\"0\">\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n        </filter>\n      </defs>\n      <g transform=\"translate(50 50)\" filter=\"url(#f1)\">\n        <g transform=\"scale(0.7)\">\n          <g transform=\"translate(-50 -50)\">\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"0.7575757575757576s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#ea3f34\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"1.0101010101010102s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#f2982c\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(90 50 50)\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"1.5151515151515151s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#52a360\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(180 50 50)\"\n              ></path>\n            </g>\n            <g>\n              <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                repeatCount=\"indefinite\"\n                values=\"0 50 50;360 50 50\"\n                keyTimes=\"0;1\"\n                dur=\"3.0303030303030303s\"\n              ></animateTransform>\n              <path\n                fill-opacity=\"0.8\"\n                fill=\"#674794\"\n                d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"\n                transform=\"rotate(270 50 50)\"\n              ></path>\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { DeepGems } from \"../../solidity/typechain/DeepGems\";\nimport { PSI } from \"../../solidity/typechain/PSI\";\nimport { Button, CheapGemSpinner, TextInput } from \"./GenericComponents\";\nimport { UserData } from \"./API\";\n\nconst IMAGES_CDN = \"https://deepgemscache.s3.us-west-2.amazonaws.com/\";\n\nconst fe = ethers.utils.formatEther;\nconst pe = ethers.utils.parseEther;\n\nexport type Blockchain = {\n  provider: ethers.providers.Web3Provider;\n  gems: DeepGems;\n  psi: PSI;\n};\n\nexport function BlockchainInteraction({\n  connectProvider,\n  blockchain,\n  userData,\n  setModalData,\n}: {\n  connectProvider: () => void;\n  blockchain?: Blockchain;\n  userData?: UserData;\n  setModalData: (x: ModalData) => void;\n}) {\n  return (\n    <div style={{ position: \"relative\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          paddingTop: 40,\n          paddingBottom: 40,\n        }}\n      >\n        <>\n          <BuyPSIBox blockchain={blockchain} setModalData={setModalData} />\n          <ForgeAGemBox blockchain={blockchain} userData={userData} />\n        </>\n      </div>\n      {blockchain && (\n        <YourGems\n          blockchain={blockchain!}\n          userData={userData!}\n          setModalData={setModalData}\n        />\n      )}\n      {!blockchain && (\n        <div\n          style={{\n            position: \"absolute\",\n            background: \"rgba(0,0,0,0.8)\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button onClick={connectProvider}>Connect Wallet</Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// If there is a number entered into the buy or sell box, the blockchain should be polled to get the current price\n//\n\nfunction useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [callback, delay]);\n}\n\nfunction BuyPSIBox({\n  blockchain,\n  setModalData,\n}: {\n  blockchain?: Blockchain;\n  setModalData: (x: ModalData) => void;\n}) {\n  const [mode, setMode] = useState<\"buy\" | \"sell\">(\"buy\");\n  const [formStates, setFormStates] = useState<{\n    buy: string;\n    sell: string;\n  }>({\n    buy: \"\",\n    sell: \"\",\n  });\n  const [psiInputAmounts, setPsiInputAmounts] = useState<{\n    buy?: BigNumber;\n    sell?: BigNumber;\n  }>({});\n  const [ethEstimates, setEthEstimates] = useState<{\n    buy?: BigNumber;\n    sell?: BigNumber;\n  }>({});\n  const [debounceIDs, setDebounceIDs] = useState<{\n    buy?: NodeJS.Timeout;\n    sell?: NodeJS.Timeout;\n  }>({});\n\n  function setForm(type: \"buy\" | \"sell\", input: string) {\n    // Set form state\n    setFormStates({\n      ...formStates,\n      [type]: input,\n    });\n\n    const debounceID = debounceIDs[type];\n\n    // Cancel previous request\n    if (debounceID) {\n      clearTimeout(debounceID);\n    }\n\n    let psiInputBigNum: BigNumber;\n    // Try to parse input as bigNum.\n    try {\n      psiInputBigNum = pe(input);\n    } catch (e) {\n      // If it does not succeed, set the estimates and\n      // the input amounts to undefined and exit\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: undefined,\n      });\n      setPsiInputAmounts({\n        ...psiInputAmounts,\n        [type]: undefined,\n      });\n      return;\n    }\n\n    // if it does succeed set the input amounts and prepare to make\n    // delayed query\n    setPsiInputAmounts({\n      ...psiInputAmounts,\n      [type]: psiInputBigNum,\n    });\n\n    // Set to undefined to get loading spinner\n    setEthEstimates({ ...ethEstimates, [type]: undefined });\n\n    // Set timeout to make request and set estimate\n    const timeoutID = setTimeout(async () => {\n      const estimate =\n        type === \"buy\"\n          ? await blockchain!.psi.quoteBuy(psiInputBigNum)\n          : await blockchain!.psi.quoteSell(psiInputBigNum);\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: estimate,\n      });\n    }, 1000);\n\n    setDebounceIDs({ ...debounceIDs, [type]: timeoutID });\n  }\n\n  async function formInterval(type: \"buy\" | \"sell\") {\n    // If there is a correctly parsed psi input, get the estimate and\n    // set it here. If the input did not parse correctly, this will be skipped\n    if (psiInputAmounts[type]) {\n      const estimate =\n        type === \"buy\"\n          ? await blockchain!.psi.quoteBuy(psiInputAmounts[type]!)\n          : await blockchain!.psi.quoteSell(psiInputAmounts[type]!);\n      setEthEstimates({\n        ...ethEstimates,\n        [type]: estimate,\n      });\n    }\n  }\n\n  useInterval(() => {\n    if (mode === \"buy\") {\n      formInterval(\"buy\");\n    } else {\n      formInterval(\"sell\");\n    }\n  }, 5000);\n\n  return (\n    <div style={{ background: \"rgb(27,23,20)\", padding: 40 }}>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <h2\n          onClick={() => setMode(\"buy\")}\n          style={mode === \"buy\" ? {} : { color: \"grey\", cursor: \"pointer\" }}\n        >\n          Buy PSI\n        </h2>\n        <h2\n          onClick={() => setMode(\"sell\")}\n          style={mode === \"sell\" ? {} : { color: \"grey\", cursor: \"pointer\" }}\n        >\n          Sell PSI\n        </h2>\n      </div>\n      {mode === \"buy\" ? (\n        <form>\n          <p>Amount of PSI to buy:</p>\n          <p>\n            <TextInput\n              input={formStates.buy}\n              setInput={(input) => setForm(\"buy\", input)}\n            />\n          </p>\n          <p>Estimated ETH required:</p>\n          <p style={{ fontFamily: \"Inconsolata\" }}>\n            {ethEstimates.buy ? `${fe(ethEstimates.buy)} ETH` : \"...\"}\n          </p>\n          <Button\n            active={!!psiInputAmounts.buy && !!ethEstimates.buy}\n            onClick={() => {\n              blockchain!.psi.buy(psiInputAmounts.buy!, {\n                value: ethEstimates.buy!,\n              });\n            }}\n          >\n            Buy\n          </Button>\n        </form>\n      ) : (\n        <form>\n          <p>Amount of PSI to sell:</p>\n          <p>\n            <TextInput\n              input={formStates.sell}\n              setInput={(input) => setForm(\"sell\", input)}\n            />\n          </p>\n          <p>Estimated ETH earned:</p>\n          <p style={{ fontFamily: \"Inconsolata\" }}>\n            {ethEstimates.sell ? `${fe(ethEstimates.sell)} ETH` : \"...\"}\n          </p>\n          <Button\n            active={!!psiInputAmounts.sell && !!ethEstimates.sell}\n            onClick={() => {\n              blockchain!.psi.sell(psiInputAmounts.sell!, ethEstimates.sell!);\n            }}\n          >\n            Sell\n          </Button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport type ModalData = GemModalData;\n\nexport type GemModalData = {\n  type: \"GemModal\";\n  tokenId: string;\n};\n\nexport function Modal({\n  modalData,\n  blockchain,\n}: {\n  modalData: ModalData;\n  blockchain: Blockchain;\n}) {\n  switch (modalData.type) {\n    case \"GemModal\":\n      return (\n        <div\n          style={{\n            width: 384,\n          }}\n        >\n          <div\n            style={{\n              width: 384,\n              height: 300,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <div\n              style={{\n                backgroundImage: `url(${IMAGES_CDN}${modalData.tokenId}.jpg)`,\n                backgroundSize: \"cover\",\n                backgroundRepeat: \"no-repeat\",\n                width: 256,\n                height: 256,\n              }}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              marginBottom: 10,\n            }}\n          >\n            <div style={{ marginRight: 10 }}>\n              <Button\n                onClick={() => {\n                  blockchain!.gems.reforge(modalData.tokenId);\n                }}\n              >\n                Reforge\n              </Button>\n            </div>\n            <div style={{ fontSize: 16 }}>\n              Reforging a gem creates a new gem using 99% of this gem's PSI.\n            </div>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              marginBottom: 10,\n            }}\n          >\n            <div style={{ marginRight: 10 }}>\n              <Button\n                onClick={() => {\n                  blockchain!.gems.burn(modalData.tokenId);\n                }}\n              >\n                Burn\n              </Button>\n            </div>\n            <div style={{ fontSize: 16 }}>\n              Burning a gem destroys the gem and adds the PSI to your account.\n            </div>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              marginBottom: 10,\n            }}\n          >\n            <div style={{ marginRight: 10 }}>\n              <Button\n                onClick={() => {\n                  blockchain!.gems.activate(modalData.tokenId);\n                }}\n              >\n                Activate\n              </Button>\n            </div>\n            <div style={{ fontSize: 16 }}>\n              Activating a gem turns it into a full NFT and allows you to sell\n              it on exchanges such as OpenSea.\n            </div>\n          </div>\n        </div>\n      );\n  }\n}\n\nfunction ForgeAGemBox({\n  userData,\n  blockchain,\n}: {\n  userData?: UserData;\n  blockchain?: Blockchain;\n}) {\n  const [psiForm, setPsiForm] = useState(\"\");\n  const [psiInputAmount, setPsiInputAmount] = useState<BigNumber>();\n\n  function setForm(input: string) {\n    // Set form state\n    setPsiForm(input);\n    let psiInputBigNum: BigNumber;\n    // Try to parse input as bigNum.\n    try {\n      psiInputBigNum = pe(input);\n    } catch (e) {\n      // Set to undefined if it doesn't work\n      setPsiInputAmount(undefined);\n      return;\n    }\n    setPsiInputAmount(psiInputBigNum);\n  }\n\n  return (\n    <div style={{ background: \"rgb(27,23,20)\", padding: 40 }}>\n      <h2>Forge a Gem</h2>\n      <form>\n        <p>Amount of PSI to forge the gem with:</p>\n        <p>\n          <TextInput input={psiForm} setInput={setForm} />\n        </p>\n        <p>Your PSI balance:</p>\n        <p style={{ fontFamily: \"Inconsolata\" }}>\n          {userData && fe(userData.psiBalance)} PSI\n        </p>\n        <Button\n          onClick={() => {\n            console.log(\"forging\");\n            psiInputAmount && blockchain!.gems.forge(psiInputAmount);\n          }}\n          active={!!psiInputAmount && psiInputAmount.lte(userData!.psiBalance)}\n        >\n          Forge\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nfunction YourGems({\n  userData,\n  blockchain,\n  setModalData,\n}: {\n  userData: UserData;\n  blockchain: Blockchain;\n  setModalData: (x: ModalData) => void;\n}) {\n  return (\n    <>\n      <h2>Your gems:</h2>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {userData &&\n          userData.gems.map((gem) => {\n            return (\n              <Gem\n                style={{ margin: 5 }}\n                tokenId={gem.id}\n                setModalData={setModalData}\n              />\n            );\n          })}\n      </div>\n    </>\n  );\n}\n\nfunction Gem({\n  style,\n  tokenId,\n  setModalData,\n}: {\n  style?: React.CSSProperties;\n  tokenId: string;\n  setModalData: (x: ModalData) => void;\n}) {\n  const [showImage, setShowImage] = useState(true);\n\n  function onImageError() {\n    setShowImage(false);\n    setTimeout(() => {\n      setShowImage(true);\n    }, 1000);\n  }\n\n  return (\n    <div\n      style={{\n        width: 100,\n        height: 100,\n        overflow: \"hidden\",\n        cursor: \"pointer\",\n        ...style,\n      }}\n    >\n      <div\n        style={{\n          overflow: \"hidden\",\n        }}\n        onClick={() =>\n          setModalData({\n            type: \"GemModal\",\n            tokenId,\n          })\n        }\n      >\n        {showImage ? (\n          <img\n            style={{\n              width: 100,\n              height: 100,\n            }}\n            alt=\"\"\n            src={`${IMAGES_CDN}${tokenId}.jpg`}\n            onError={onImageError}\n          />\n        ) : (\n          <CheapGemSpinner size={100} />\n        )}\n      </div>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { ethers, BigNumber } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport { DeepGems } from \"../../solidity/typechain/DeepGems\";\nimport { PSI } from \"../../solidity/typechain/PSI\";\nimport { Blockchain } from \"./BlockchainInteraction\";\n\nimport gemArtifact from \"./artifacts/contracts/DeepGems.sol/DeepGems.json\";\nimport psiArtifact from \"./artifacts/contracts/PSI.sol/PSI.json\";\n\n// TODO\n// - Add approve button before forging\n// - Deal with timing (have to wait 5 seconds after connecting wallet etc)\n// - Get buttons on gem modal to work\n// - use more rigorous margin of error etc on buys and sells\n\nconst GRAPHQL_URL =\n  \"https://api.thegraph.com/subgraphs/name/jtremback/deepgems\";\nconst GEMS_CONTRACT = \"0x5da58028D6305f541695B54412BbE356F5D8757C\";\nconst PSI_CONTRACT = \"0xCA552ACe5ED13FfA1edA9e7DeDA0DCc62BD9567b\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: \"INFURA_ID\", // required\n    },\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nconst recentGemsQuery = `{\n  gems(orderBy: number, orderDirection: desc, first: 10, where: { burned: false }){\n    id\n    psi\n    owner\n    forgeTime\n    forgeBlock\n    number\n  }\n}`;\n\nconst userGemsQuery = `query UserGems($userAddress: Bytes!) {\n  gems(orderBy:number, orderDirection: asc, where: { owner: $userAddress, burned: false }){\n    id\n    psi\n    owner\n    forgeTime\n    forgeBlock\n    number\n  }\n}`;\n\nexport async function getRecentGems() {\n  const graphGems = (\n    await (\n      await fetch(GRAPHQL_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({ query: recentGemsQuery }),\n      })\n    ).json()\n  ).data.gems;\n  return graphGems;\n}\n\nexport async function getUserData(blockchain: Blockchain, userAddress: string) {\n  const gems = (\n    await (\n      await fetch(GRAPHQL_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({\n          query: userGemsQuery,\n          variables: {\n            userAddress,\n          },\n        }),\n      })\n    ).json()\n  ).data.gems;\n\n  const psiBalance = await blockchain.psi.balanceOf(userAddress);\n\n  return { gems, psiBalance };\n}\n\nexport type GemData = {\n  id: string;\n  psi: string;\n  number: string;\n};\n\nexport type UserData = {\n  psiBalance: BigNumber;\n  gems: GemData[];\n};\n\nexport async function connectProvider() {\n  //  Enable session (triggers QR Code modal)\n  const provider = new ethers.providers.Web3Provider(await web3Modal.connect());\n  const gems = (new ethers.Contract(\n    GEMS_CONTRACT,\n    gemArtifact.abi,\n    provider.getSigner()\n  ) as any) as DeepGems;\n\n  const psi = (new ethers.Contract(\n    PSI_CONTRACT,\n    psiArtifact.abi,\n    provider.getSigner()\n  ) as any) as PSI;\n  return { provider, gems, psi };\n}\n","import React, { CSSProperties, useEffect, useState, useRef } from \"react\";\nimport background from \"./background.jpg\";\nimport \"./App.css\";\nimport psi50example from \"./images/00056-000032-0.5.jpg\";\nimport psi100example from \"./images/00056-000032-1.jpg\";\nimport psi200example from \"./images/00056-000032-2.jpg\";\nimport psi300example from \"./images/00056-000032-3.jpg\";\nimport useAPIPolling from \"use-api-polling\";\nimport { Blockchain, BlockchainInteraction } from \"./BlockchainInteraction\";\nimport { CheapGemSpinner } from \"./GenericComponents\";\nimport {\n  connectProvider,\n  UserData,\n  GemData,\n  getUserData,\n  getRecentGems,\n} from \"./API\";\nimport { Modal, ModalData } from \"./BlockchainInteraction\";\n\nconst IMAGES_CDN = \"https://deepgemscache.s3.us-west-2.amazonaws.com/\";\nconst METADATA_CDN = \"https://deepgemsdata.s3.us-west-2.amazonaws.com/\";\n\nfunction useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [callback, delay]);\n}\n\nconst fontStyles: CSSProperties = {\n  fontSize: 24,\n  fontWeight: \"lighter\",\n  color: \"white\",\n  backgroundColor: \"rgba(0,0,0,0.7)\",\n};\n\nfunction App() {\n  const [blockchain, setBlockchain] = useState<Blockchain>();\n  const [userAddress, setUserAddress] = useState<string>();\n  const [userData, setUserData] = useState<UserData>();\n  const [modalData, setModalData] = useState<ModalData>();\n\n  // TODO: get rid of this api polling hook thing cause\n  // it sucks and do it yourself with useInterval\n  const recentGems = useAPIPolling<GemData[]>({\n    fetchFunc: getRecentGems,\n    initialState: [],\n    delay: 5000,\n  });\n\n  async function tryToGetuserData() {\n    if (!blockchain || !userAddress) {\n      return;\n    }\n    const userData = await getUserData(blockchain, userAddress);\n    setUserData(userData);\n  }\n\n  useInterval(tryToGetuserData, 5000);\n\n  async function triggerConnectProvider() {\n    const blockchain = await connectProvider();\n    const userAddress = await blockchain.provider.getSigner().getAddress();\n    const userData = await getUserData(blockchain, userAddress);\n    setUserData(userData);\n    setBlockchain(blockchain);\n    setUserAddress(userAddress);\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundImage: `url(${background})`,\n          backgroundPositionX: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundColor: \"black\",\n          width: \"100%\",\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n        }}\n      >\n        <DigDeeper />\n        <PageTitle />\n        <RecentGems gemData={recentGems} />\n        <div\n          style={{\n            ...fontStyles,\n            maxWidth: \"1024px\",\n            padding: 30,\n          }}\n        >\n          <ExplainerText />\n          <BlockchainInteraction\n            blockchain={blockchain}\n            connectProvider={triggerConnectProvider}\n            userData={userData}\n            setModalData={setModalData}\n          />\n        </div>\n      </div>\n      {modalData && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            background: \"rgba(0,0,0,0.5)\",\n            display: \"flex\",\n            justifyContent: \"space-evenly\",\n            alignItems: \"center\",\n          }}\n          onClick={() => setModalData(undefined)}\n        >\n          <div\n            style={{\n              ...fontStyles,\n              margin: 40,\n              overflow: \"auto\",\n              padding: 20,\n            }}\n          >\n            <Modal blockchain={blockchain!} modalData={modalData} />\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction DigDeeper() {\n  return (\n    <div style={{ height: 1700, display: \"flex\", flexDirection: \"column\" }}>\n      <div style={{ height: \"80vh\" }}></div>\n      <div\n        style={{\n          background: \"rgba(0,0,0,0.5)\",\n          padding: 20,\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        <h1 style={{ color: \"rgb(217,213,207)\", margin: 0 }}>Dig deeper ↓</h1>\n      </div>\n    </div>\n  );\n}\n\nfunction PageTitle() {\n  return (\n    <div style={{ maxWidth: \"1202px\" }}>\n      <h1\n        className=\"display-3\"\n        style={{\n          color: \"rgb(217,213,207)\",\n          fontSize: 150,\n          textAlign: \"center\",\n          opacity: 0.8,\n        }}\n      >\n        Deep Gems\n      </h1>\n    </div>\n  );\n}\n\nfunction RecentGems({ gemData }: { gemData: GemData[] }) {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        whiteSpace: \"nowrap\",\n        display: \"flex\",\n        flexDirection: \"row-reverse\",\n        marginBottom: 20,\n      }}\n    >\n      <div\n        style={{\n          width: 200,\n          height: 200,\n          display: \"inline-block\",\n        }}\n      ></div>\n      {gemData.map((gem) => (\n        <RecentGem gem={gem} />\n      ))}\n    </div>\n  );\n}\n\nfunction RecentGem({\n  style,\n  gem,\n}: {\n  style?: React.CSSProperties;\n  gem: GemData;\n}) {\n  const [showImage, setShowImage] = useState(true);\n\n  function onImageError() {\n    setShowImage(false);\n    setTimeout(() => {\n      setShowImage(true);\n    }, 1000);\n  }\n  return (\n    <div\n      style={{\n        display: \"inline-block\",\n        background: \"rgba(0,0,0,0.7)\",\n        margin: 5,\n        ...style,\n      }}\n    >\n      {showImage ? (\n        <img\n          style={{\n            width: 200,\n            height: 200,\n          }}\n          alt=\"\"\n          src={`${IMAGES_CDN}${gem.id}.jpg`}\n          onError={onImageError}\n        />\n      ) : (\n        <CheapGemSpinner size={200} />\n      )}\n      <div\n        style={{ color: \"white\", textAlign: \"center\" }}\n      >{`#${gem.number} - ${gem.psi} PSI`}</div>\n    </div>\n  );\n}\n\nfunction ExplainerText() {\n  return (\n    <>\n      Deep Gems are completely unique AI-generated NFT gemstones. Some are\n      beautiful, some are ugly. Nobody knows what a gem will look like until the\n      moment it is forged. Deep Gems are powered by PSI. The more PSI you forge\n      a gem with, the more interesting it becomes.\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          paddingTop: 40,\n          paddingBottom: 40,\n        }}\n      >\n        {[\n          [psi50example, \"50 PSI\"],\n          [psi100example, \"100 PSI\"],\n          [psi200example, \"200 PSI\"],\n          [psi300example, \"300 PSI\"],\n        ].map((data) => {\n          return (\n            <div style={{ maxWidth: 200, textAlign: \"center\" }}>\n              <img\n                src={data[0]}\n                alt=\"\"\n                style={{ paddingBottom: 20, width: \"100%\" }}\n              ></img>\n              {data[1]}\n            </div>\n          );\n        })}\n      </div>\n      When you forge gem, only 95% of the PSI goes into the gem. The other 5%\n      goes to the artists behind Deep Gems. You can get PSI on a bonding curve.\n      The more people get into Deep Gems, the more it will cost you. If you\n      don't like how a gem turned out, you can reforge it to try again, or burn\n      it to get the PSI back out. To sell a gem on an NFT exchange, you can\n      activate it to turn it into a transferable NFT.\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}